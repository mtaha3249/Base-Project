name: GameCI Template üéÆ

on: push

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  checkLicense:
    name: Check for the Unity license ‚òëÔ∏è
    runs-on: ubuntu-latest
    steps:
      - name: Fail - No license ‚ò†Ô∏è
        if: ${{ !startsWith(env.UNITY_LICENSE, '<') }}
        run: exit 1
        
  buildAndTestForSomePlatforms:
    name: Build for ${{ matrix.targetPlatform }} on version ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - Base-Project
        unityVersion:
          - 2020.3.0f1
        targetPlatform:
          - Android
#           - StandaloneWindows64
#           - StandaloneLinux64
    steps:

      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true
    
      # Cache
      - uses: actions/cache@v1.1.0
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-

      # Test
      - name: Run tests
        uses: webbertakken/unity-test-runner@v1.3
        id: testRunner
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
      
      # Upload test results
      - uses: actions/upload-artifact@v1
        with:
          name: Test results (all modes)
          path: ${{ steps.testRunner.outputs.artifactsPath }}

      # Build
      - name: Build projects
        uses: webbertakken/unity-builder@v0.10
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: ${{ secrets.APP_NAME }}

      # Upload to Drive
      - name: Upload build to Google Drive
        uses: Jodebu/upload-to-drive@master
        with:
          target: build
          name: ${{ matrix.targetPlatform }}
          credentials: ${{ secrets.DRIVE_CREDENTIALS }}
          folder: ${{ secrets.DRIVE_FOLDER }}
        
#   testRunner:
#    needs: checkLicense
#    name: Test all modes üìù
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2

#      - name: Create LFS file list
#        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

#      - name: Restore LFS cache
#        uses: actions/cache@v2
#        id: lfs-cache
#        with:
#          path: .git/lfs
#          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

#      - name: Git LFS Pull
#        run: |
#          git lfs pull
#          git add .
#          git reset --hard

#      - name: Restore Library cache
#        uses: actions/cache@v2
#        with:
#          path: Library
#          key: Library-test-project
#          restore-keys: |
#            Library-test-project-
#            Library-

#      - uses: webbertakken/unity-test-runner@v2
#        id: testRunner
#        with:
#          testMode: all

#      - uses: actions/upload-artifact@v2
#        with:
#          name: Test results (all modes)
#          path: ${{ steps.testRunner.outputs.artifactsPath }}

#   buildAndroid:
#    needs: testRunner
#    name: Build for Android üì±
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2

#      - name: Create LFS file list
#        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

#      - name: Restore LFS cache
#        uses: actions/cache@v2
#        id: lfs-cache
#        with:
#          path: .git/lfs
#          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

#      - name: Git LFS Pull
#        run: |
#          git lfs pull
#          git add .
#          git reset --hard

#      - name: Restore Library cache
#        uses: actions/cache@v2
#        with:
#          path: Library
#          key: Library-build-Android
#          restore-keys: |
#            Library-build-
#            Library-

#      - uses: webbertakken/unity-builder@v2
#        with:
#          targetPlatform: Android

#      - uses: actions/upload-artifact@v2
#        with:
#          name: build-Android
#          path: build/Android

#   deployPages:
#    needs: buildAndroid
#    name: Deploy to Github Pages üöÄ
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v2

#      - name: Download Android Artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: build-Android
#          path: build/Android
