name: Deployment üéÆ

on:
  push:
    branches:
    - develop

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  sendNotification:
      name: Commit Notification
      runs-on: ubuntu-latest
      steps:
        - uses: actions-ecosystem/action-slack-notifier@v1
          with:
            slack_token: ${{ secrets.SLACK_TOKEN }}
            channel: ${{ secrets.APP_NAME }}
            message: |
              @${{ github.actor }} pushed commits.
            color: green # optional
            verbose: true # optional
            
  checkLicense:
    name: Check for the Unity license ‚òëÔ∏è
    runs-on: ubuntu-latest
    steps:
      - name: Fail - No license ‚ò†Ô∏è
        if: ${{ !startsWith(env.UNITY_LICENSE, '<') }}
        run: exit 1
        
  testRunner:
   needs: checkLicense
   name: Test all modes üìù
   runs-on: ubuntu-latest
   steps:
     - name: Checkout code
       uses: actions/checkout@v2

     - name: Create LFS file list
       run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

     - name: Restore LFS cache
       uses: actions/cache@v2
       id: lfs-cache
       with:
         path: .git/lfs
         key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

     - name: Git LFS Pull
       run: |
         git lfs pull
         git add .
         git reset --hard

     - name: Restore Library cache
       uses: actions/cache@v2
       with:
         path: Library
         key: Library-test-project
         restore-keys: |
           Library-test-project-
           Library-

     - uses: webbertakken/unity-test-runner@v2
       id: testRunner
       with:
         testMode: all

     - uses: actions/upload-artifact@v2
       with:
         name: Test results (all modes)
         path: ${{ steps.testRunner.outputs.artifactsPath }}

  Build:
   needs: testRunner
   name: Build for ${{ matrix.targetPlatform }}
   runs-on: ubuntu-latest
   strategy:
     fail-fast: false
     matrix:
        targetPlatform:
          - Android
#           - StandaloneWindows64
#           - StandaloneLinux64
   steps:
     - name: Checkout code
       uses: actions/checkout@v2

     - name: Create LFS file list
       run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

     - name: Restore LFS cache
       uses: actions/cache@v2
       id: lfs-cache
       with:
         path: .git/lfs
         key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

     - name: Git LFS Pull
       run: |
         git lfs pull
         git add .
         git reset --hard

     - name: Restore Library cache
       uses: actions/cache@v2
       with:
         path: Library
         key: Library-build-Android
         restore-keys: |
           Library-build-
           Library-

      # Building Project
     - name: Build projects
       uses: webbertakken/unity-builder@v2
       with:
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: ${{ secrets.APP_NAME }}
          buildsPath: builds

#      - uses: actions/upload-artifact@v2
#        with:
#           path: build/${{ matrix.targetPlatform }}

#       Upload to Drive
     - name: Upload build to Google Drive
       uses: Jodebu/upload-to-drive@master
       id: driveUpload
       with:
          target: builds/${{ secrets.APP_NAME }}.apk
          name: ${{ matrix.targetPlatform }} ${{ secrets.APP_NAME }}
          credentials: ${{ secrets.DRIVE_CREDENTIALS }}
          folder: ${{ secrets.DRIVE_FOLDER }}

     - name: Slack Notification
       uses: actions-ecosystem/action-slack-notifier@v1
       with:
          slack_token: ${{ secrets.SLACK_TOKEN }}
          channel: ${{ secrets.APP_NAME }}
          message: ${{ matrix.targetPlatform }} Build of ${{ secrets.APP_NAME }} game is uploaded to "<steps.driveUpload.outputs.link|Google Drive>."
          color: green # optional
          verbose: false # optional
